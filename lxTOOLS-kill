#!/bin/bash
# script von -lx-



# ---------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------
# ----- ToDo:
#
# ----- DONE:
#
# ----- Bugs:
#
# ---------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------
# [[ -z "$1" ]] && echo -e "[FEHLER: ${FUNCNAME[0]} - Kein oder fehlerhaftes Argument übergeben! - '$*']" && return








function fncHHMMSS {
    case "$1" in
        ( nurZAHLEN )
            echo -en `date '+%H%M%S'` ;;
        ( nurSS )
            echo -en `date '+%S'` ;;
        ( nurSS.S )
            echo -en `date '+%S.%N'` ;;
        ( nurSS.mS3 )
            HMSmS=`date '+%S.%N'`
            HMSxyz=${HMSmS//.*/}
            mSxyz=${HMSmS//*./}
            mSxyz=${mSxyz:0:3}
            echo -en $HMSxyz"."$mSxyz ;;
        ( norm.mS2 )
            HMSmS=`date '+%H:%M:%S.%N'`
            HMSxyz=${HMSmS//.*/}
            mSxyz=${HMSmS//*./}
            mSxyz=${mSxyz:0:2}
            echo -en $HMSxyz"."$mSxyz ;;
        ( norm.mS3 )
            HMSmS=`date '+%H:%M:%S.%N'`
            HMSxyz=${HMSmS//.*/}
            mSxyz=${HMSmS//*./}
            mSxyz=${mSxyz:0:3}
            echo -en $HMSxyz"."$mSxyz ;;
        (*)
            echo -en `date '+%H:%M:%S'` ;;
    esac
    #echo -en `date '+%H:%M:%S'`
}

function fncYEAR1231 {
    case "$1" in
        ( YEAR )
            echo -en `date '+%Y'`
            ;;
        ( 12 )
            echo -en `date '+%m'`
            ;;
        ( 31 )
            echo -en `date '+%d'`
            ;;
        ( 1231 )
            echo -en `date '+%m%d'`
            ;;
        (*)
            echo -en `date '+%Y%m%d'`
            ;;
    esac
}

dateiVERSION=""
function fncAUSLESENversion {
    [ -z $nutzer ] && nutzer=`ps --pid $$ -o user=` && [[ "$nutzer" == "root" ]] && nutzer=`id -un 1000`
    strVERZEICHNISbin="/home/$nutzer/bin-bak/"
    iaLSarray=(`ls -r $strVERZEICHNISbin$datei"_"* 2>/dev/null`)
    iaLSarrayANZAHL=${#iaLSarray[@]}
    dateiVERSIONkomplett=${iaLSarray[0]}
    # -Bis zum letzten Slash abschneiden:
    dateiVERSIONkomplett=${dateiVERSIONkomplett//*\//}
    # -Dateiname bis Unterstrich abschneiden:
    dateiVERSIONkomplett=${dateiVERSIONkomplett//`echo -e $datei`_/}
    # -Unterstrich bis zum Ende abschneiden:
    dateiVERSIONkomplett=${dateiVERSIONkomplett//_*/}
    dateiVERSION="($dateiVERSIONkomplett)"
}



pfad="$1"
flag_update=$2
flag_aufruf_intern=$3
# -------------------------------------
zeitSTARTutc=`date '+%s'`
zeitSTART=`date -d @$zeitSTARTutc`
zeitSTARTdateiname=`date -d @$zeitSTARTutc '+%F_%T'`
zeitSTARTdateiname=${zeitSTARTdateiname//\-/}
zeitSTARTdateiname=${zeitSTARTdateiname//:/}
zeitSTARTdateiname=${zeitSTARTdateiname//_/\-}
# -------------------------------------
# `fncHHMMSS "norm.mS3"`
txtZEITSTEMPEL=`fncHHMMSS "norm.mS3"`
zeitSTART="$txtZEITSTEMPEL"
zeitSTARTtitel=`date '+%c'`
flagACTION="false"

fmtFETT=`tput bold`
fmtINVERS=`tput rev`
fmtUNTERSTRICHEN=`tput smul`
fmtRESET=`tput sgr0`

datei=${0//*\//}
[ ! $dateiVERSION ] && fncAUSLESENversion
txtTITEL="Komfortabel Prozesse und ihre Kindprozesse beenden!"
nutzer=`ps --pid $$ -o user=`







# -------------------------------------------------------------------------------------------------
# ----- START Prozess Option ----------------------------------------------------------------------

function fncKILLallePROZESSE {
    # -Alle Instanzen der genutzten Programme auslesen und beenden!
    # --WICHTIG: Nur im eigenen Terminal! Wenn $1==""
    # --WICHTIG: Nur im eigenen Terminal! Wenn $1=="EIGENESTTY"
    # --WICHTIG: Nur im eigenen Terminal! Wenn $1=="*"
    # --WICHTIG: In allen Terminals! Wenn $1=="ALLETTY"
    #
    flagTestmode="false"
    [[ "$1" == *-TESTMODE ]] && flagTestmode="true"
    for i in "${arrPROZESSE[@]}"
    do
        if ( [[ "$1" == "" ]] || [[ "$1" == "EIGENESTTY" ]] )
        then
            arrTERMINALS=`tty`
        elif ( [[ "$1" == ALLETTY* ]] )
        then
            arrTERMINALS=(`ps -C $i -o tty=`)
        else
            arrTERMINALS=`tty`
        fi
        iTalle=""
        for iT in "${arrTERMINALS[@]}"
        do
            if ( [[ "$iTalle" != *$iT* ]] )
            then
                echo -e "|- Prozess: $i"
                echo -e "|- Terminal: "$iT

                ausgabe=`ps -ll --tty $iT | grep $i`
                if ( [[ "$ausgabe" != "" ]] )
                then
                    echo -e "$ausgabe"
                    echo -e "|-"
                fi
                

                #strTERMINAL=`tty`
                #strTERMINAL="pts/5"
                strTERMINAL=$iT
                strLISTEtoKILL=""
                ausgabePIDs=""
                ausgabePIDsTMP=""
                ausgabeCHILDPIDs=""
                ausgabeCHILDPIDsTMP=""
                #ausgabe=`lxPS -qs $i`
                #ausgabe=`ps -All --tty "/dev/pts/5" | grep $1`
                ausgabeLISTEdisplay=`ps --tty $strTERMINAL -o pid=`
                ausgabeLISTEname=`ps -C $i -o pid=`
                #ausgabeLISTEkombiniert=`ps --tty $strTERMINAL -l | grep $i`
                #ausgabeLISTEkombiniert=`ps --tty "pts/5" -l | grep $i`
                ausgabeLISTEkombiniert=`ps --tty $strTERMINAL -o pid= -o tty= -o comm= | grep $i`
                arrLISTEpid=($ausgabeLISTEkombiniert)
                #echo -e "|- Kombiniert: "$ausgabeLISTEkombiniert
                
                typeset -i zL=0
                #echo -e "|- IDs:"
                #while ( [[ "${arrLISTEpid[$zL]}" != "" ]] && [[ "${arrLISTEpid[$zL]}" != "$$" ]] )
                while ( [[ "${arrLISTEpid[$zL]}" != "" ]] )
                do
                    ausgabePIDsTMP="${arrLISTEpid[$zL]}"
                    echo -en "|- PID: "$ausgabePIDsTMP
                    if ( [[ "$ausgabePIDsTMP" == "$$" ]] )
                    then
                        #continue
                        flagEIGENEpsid="true"
                    fi
                    if ( [[ "$ausgabePIDsTMP" != "" ]] && [[ "$ausgabePIDsTMP" != "$$" ]] )
                    then
                        if ( [[ "$strLISTEtoKILL" == "" ]] )
                        then
                            strLISTEtoKILL=$ausgabePIDsTMP
                        else
                            strLISTEtoKILL=$strLISTEtoKILL" "$ausgabePIDsTMP
                        fi
                    fi
                    ausgabeCHILDPIDsTMP=`ps --ppid ${arrLISTEpid[$zL]} -o pid=`
                    if ( [[ $ausgabeCHILDPIDsTMP != "" ]] )
                    then
                        #echo -en " CPIDs: "$ausgabeCHILDPIDsTMP" --- "
                        echo -en " CPIDs: "$ausgabeCHILDPIDsTMP
                        strLISTEtoKILL=$strLISTEtoKILL" "$ausgabeCHILDPIDsTMP
                    fi
                    zL=zL+3
                    echo -en "\\n"
                done
                
                if ( [[ "$ausgabePIDsTMP" != "" ]] || [[ "$ausgabeCHILDPIDsTMP" != "" ]] )
                then
                    #echo -e "\\n|-"
                    echo -e "|-"
                else
                    echo -e "|-"
                fi
                
                if ( [[ "$flagTestmode" == "false" ]] )
                then
                    nix=1
                    if ( [[ "$ausgabeLISTEkombiniert" != "" ]] )
                    then
                        #echo -e "|- PIDs: "$ausgabePIDs
                        #echo -e "|- CPIDs:"$ausgabeCHILDPIDs
                        if ( [[ "$strLISTEtoKILL" != "" ]] )
                        then
                            #echo -e "kill -9 oder -14... "$strLISTEtoKILL
                            #kill -9 $ausgabePIDs $ausgabeCHILDPIDs
                            #echo -e "|- Komplette Liste:"\\n$strLISTEtoKILL\\n"---"
                            
                            # -Doppelte PIDs in der Liste führen zu unnötigen Fehlermeldungen, daher
                            #  werden diese erkannt und entfernt!
                            echo -e "|- Komplette Liste (bereinigt):"
                            arrLISTEtoKILL=($strLISTEtoKILL)
                            typeset -i zLK=0
                            strLISTEpidBENUTZT=""
                            flagLISTEtoKILLfertig="false"
                            while ( [[ "${arrLISTEtoKILL[$zLK]}" != "" ]] )
                            do
                                if ( [[ "$strLISTEpidBENUTZT" != *${arrLISTEtoKILL[$zLK]}* ]] && [[ `ps -p ${arrLISTEtoKILL[$zLK]} | grep ${arrLISTEtoKILL[$zLK]}` != "" ]] )
                                then
                                    strLISTEpidBENUTZT=$strLISTEpidBENUTZT" "${arrLISTEtoKILL[$zLK]}
                                    echo -en "${arrLISTEtoKILL[$zLK]} "
                                    flagLISTEtoKILLfertig="true"
                                fi
                                zLK=zLK+1
                            done
                            echo -e \\b
                            if ( [[ "$flagLISTEtoKILLfertig" == "true" ]] )
                            then
                                echo -e "|- Der Kill Befehl: SIGSTOP"\\n"|- 'kill -19 $strLISTEpidBENUTZT'"
                                kill -19 $strLISTEpidBENUTZT 2>/dev/null
                                sleep 1
                                echo -e "|-"
                                echo -e "|- Der Kill Befehl: SIGTERM"\\n"|- 'kill -15 $strLISTEpidBENUTZT'"
                                kill -15 $strLISTEpidBENUTZT 2>/dev/null
                                sleep 1
                                echo -e "|-"
                                echo -e "|- Der Kill Befehl: SIGKILL"\\n"|- 'kill -9 $strLISTEpidBENUTZT'"
                                kill -9 $strLISTEpidBENUTZT 2>/dev/null
                                sleep 1
                            else
                                echo -e "|- INFO: Die Prozesse wurden bereits beendet!"
                            fi
                        else
                            echo -e "|- INFO: Keine Prozesse zum Beenden gefunden!"
                        fi
                    else
                        echo -e "|- INFO: $i wurde nicht in der Prozessliste gefunden!"
                    fi
                fi
                echo -e "|-"

            fi
            iTalle=$iTalle" "$iT
        done
    done
}

#fncKILLallePROZESSE "EIGENESTTY"
#fncKILLallePROZESSE "ALLETTY"


function fncBefehlAufrufenKill {
    arrPROZESSE=($strg2)
#     if ( [[ "$1" == "-PS" ]] )
#     then
#         echo -e "|- Alle Prozesse in allen Terminals anzeigen:"\\n"|-"
#         for i in "${arrPROZESSE[@]}"
#         do
#             echo -e "|- Prozess: $i"
#             ausgabe=`lxPS -qs $i`
#             if ( [[ "$ausgabe" != "" ]] )
#             then
#                 echo -e "$ausgabe"
#             else
#                 echo -e "|- INFO: $i wurde nicht in der Prozessliste gefunden!"
#             fi
#             echo -e "|-"
#         done
#         exit 0;
#     fi
    if ( [[ "$1" == "-PS" ]] )
    then
        echo -e "|- Alle Prozesse in allen Terminals anzeigen:"\\n"|-"
        fncKILLallePROZESSE "ALLETTY-TESTMODE"
        exit 0;
    fi

    if ( [[ "$1" == "-K" ]] )
    then
        echo -e "|- Alle Prozesse im eigenen Terminal anzeigen und beenden (kill):"\\n"|-"
        fncKILLallePROZESSE "EIGENESTTY"
        exit 0;
    fi

    if ( [[ "$1" == "-KA" ]] )
    then
        echo -e "|- Alle Prozesse in allen Terminals anzeigen und beenden (kill):"\\n"|-"
        fncKILLallePROZESSE "ALLETTY"
        exit 0;
    fi
}

# ----- ENDE Prozess Option -----------------------------------------------------------------------
# -------------------------------------------------------------------------------------------------












# -Anzahl der zu verschiebenden Quellen auslesen:
typeset -i intANZAHLquellen=1
typeset -i intZ=1
if ( [[ "$1" != "" ]] )
then
    #intANZAHLquellen=$1
    intANZAHLquellen=1
    #clear
else
    intANZAHLquellen=1
fi







# ---------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------
# -Die Namen der Dateien zum Zwischenspeichern und Loggen festlegen.
# -Schreibrechte überprüfen.
#
dateiLOGS="00.$datei.logs.txt"
dateiFEHLER="00.$datei.fehler.txt"
dateiLOGStmp=$dateiLOGS".tmp"
dateiLOGSsicherung="00.$datei.logs.$zeitSTARTdateiname.txt"

BAKdateiLOGS="$dateiLOGS"
BAKdateiFEHLER="$dateiFEHLER"
BAKdateiLOGStmp="$dateiLOGStmp"
BAKdateiLOGSsicherung="$dateiLOGSsicherung"

pfadTMP="/home/$nutzer/"
[[ -w `pwd` ]] && pfadTMP=""

dateiLOGS="$pfadTMP$BAKdateiLOGS"
dateiFEHLER="$pfadTMP$BAKdateiFEHLER"
dateiLOGStmp="$pfadTMP$BAKdateiLOGStmp"

TMPdateiLOGS="$dateiLOGS"
TMPdateiFEHLER="$dateiFEHLER"
TMPdateiLOGStmp="$dateiLOGStmp"

[[ -f $dateiLOGS ]] && rm $dateiLOGS
[[ -f $dateiFEHLER ]] && rm $dateiFEHLER
[[ -f $dateiLOGStmp ]] && rm $dateiLOGStmp
# ---------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------



# -Nur Starten wenn NICHT:
# --Logs, Hilfe
if ( [[ "$1" != -*l* ]] && [[ "$1" != -*h* ]] )
then
    nix=0
    # -Wegen Unterschieden beim Auslesen der aktuellen Cursorposition, wird clear
    #  aufgerufen. Wenn die aktuelle Cursorposition in der untersten Zeile wäre, würde
    #  ansonsten die getCPos Funktion nicht korrekt arbeiten!
    #echo -e "...clear screen..."
    #clear -x
fi













# ---------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------
BAKtxtAusgabeKomplett=""
function fncAUSGABEstdoutUNDlogdatei () {
    # -Erwartet einen String zum Ausgeben: $1
    # --Ausgabe am Bildschirm
    # --Ausgabe in die Logdatei
    if ( [[ "$1" != "" ]] )
    then
        echo -e "$1"
        echo -e "$1" >> $dateiLOGS
    fi
}

function fncECHOlx () {
    # -Erwartet einen String zum Ausgeben: $1
    # --Ausgabe am Bildschirm
    # --Ausgabe in die Logdatei
    if ( [[ "$1" != "" ]] )
    then
        echo -e "$1"
        echo -e "$1" >> $dateiLOGS
    fi
}

function fncECHOlxD () {
    # -Erwartet einen String zum Ausgeben: $1
    # --Ausgabe am Bildschirm
    # --Ausgabe in die Logdatei
    if ( [[ "$1" != "" ]] )
    then
        echo -e "$1"
        #echo -e "$1" >> $dateiLOGS
    fi
}

function fncECHOlxL () {
    # -Erwartet einen String zum Ausgeben: $1
    # --Ausgabe am Bildschirm
    # --Ausgabe in die Logdatei
    if ( [[ "$1" != "" ]] )
    then
        #echo -e "$1"
        echo -e "$1" >> $dateiLOGS
    fi
}

function fncECHOlxn () {
    # -Erwartet einen String zum Ausgeben: $1
    # --Ausgabe am Bildschirm
    # --Ausgabe in die Logdatei
    if ( [[ "$1" != "" ]] )
    then
        echo -en "$1"
        echo -en "$1" >> $dateiLOGS
    fi
}


typeset -i intLayoutMaxSpalten=0
typeset -i intLayoutMaxSpaltenVorgabe=120
function fncLayoutMaxSpalten {
    # -Den Anzeigebereich des eigenen Layouts auf 80% der vorhandenen Bildschirmbreite
    #  begrenzen: ($zSPALTEN/10)*8
    
    typeset -i zZEILEN=$LINES
    typeset -i zSPALTEN=$COLUMNS

    intLayoutMaxSpaltenSCALE1=`echo -e "scale=1 ; ($zSPALTEN/10)*8" | bc -l`
    intLayoutMaxSpalten=${intLayoutMaxSpaltenSCALE1//\.*/}
    [ "$intLayoutMaxSpalten" -le 0 ] && intLayoutMaxSpalten=$intLayoutMaxSpaltenVorgabe
}
fncLayoutMaxSpalten


function fncAusgabeHRMaxSpalten {
    # -HRMaxSpalten erstellen und ausgeben!
    # -Argumente:
    # --$1: Die Zeichen mit denen die Linie anfangen soll.
    # --$2: Das Zeichen mit dem die Linie gefüllt wird.
    # -Werden keine Argumente übergeben, wird Standard genutzt:
    txtHRAnfang="|"
    txtHRFuellen="-"
    
    typeset -i zHRAnfang=0
    typeset -i zHRFuellen=0
    typeset -i zHRMaxSpalten=0
    
    [ $1 ] && txtHRAnfang="$1"
    zHRAnfang=${#txtHRAnfang}
    [ $2 ] && txtHRFuellen="$2"
    zHRFuellen=${#txtHRFuellen}
    
    txtHRMaxSpalten="$txtHRAnfang""$txtHRFuellen"
    zHRMaxSpalten=intLayoutMaxSpalten-zHRAnfang-zHRFuellen
    for ((zHR=0; zHR<$zHRMaxSpalten; zHR++))
    do
        #echo -en "$zzHR - "
        txtHRMaxSpalten="$txtHRMaxSpalten""$txtHRFuellen"
    done
    echo -e "\\r$txtHRMaxSpalten"
}



function fncLayoutHRFullScreen {
    # -Fullscreen HR erstellen und in $txtHRFullScreen speichern.
    # -Argumente:
    # --$1: txtHRFullScreenANFANG
    # --$2: txtHRFullScreenENDE
    
    typeset -i zZEILEN=$LINES
    typeset -i zSPALTEN=$COLUMNS
    typeset -i zHRanfang=0
    typeset -i zHRmitte=0
    typeset -i zHRende=0
    typeset -i zzHR=0
    
    txtHRFullScreenANFANG="|- $datei "
    #txtHRFullScreenANFANG="|"
    [ $1 ] && txtHRFullScreenANFANG="$1"
    zHRanfang=${#txtHRFullScreenANFANG}
    
    #txtHRFullScreenENDE=" $datei -|"
    txtHRFullScreenENDE="|"
    [ $2 ] && txtHRFullScreenENDE="$2"
    zHRende=${#txtHRFullScreenENDE}
    
    txtHRFullScreenMITTE=""
    zHRmitte=zSPALTEN-zHRanfang-zHRende
    for ((zzHR=0; zzHR<$zHRmitte; zzHR++))
    do
        #echo -en "$zzHR - "
        txtHRFullScreenMITTE="$txtHRFullScreenMITTE""-"
    done
    txtHRFullScreen="$txtHRFullScreenANFANG""$txtHRFullScreenMITTE""$txtHRFullScreenENDE"
    echo -e "\\r$txtHRFullScreen"
}
fncLayoutHRFullScreen >/dev/null



# ---------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------











#txtHR="|--------------------------------------------------------------------------------"
txtHR="`fncAusgabeHRMaxSpalten`"


txtKOPF=\
"|--------------------------------------------------------------------------------"\\n\
"|- $datei $dateiVERSION -| "

txtKOPFlogs=$txtKOPF"Logdatei"\\n\
"|--------------------------------------------------------------------------------"\\n\
"|- $zeitSTARTtitel"\\n\
"|-"

txtKOPF=$txtKOPF$txtTITEL\\n\
"|--------------------------------------------------------------------------------"\\n\
"|- $zeitSTARTtitel"\\n\
"|-"




#"|- -6. Optionen beim Verschieben: rekursiv, update"\\n\

txtBENUTZUNG=\
"Benutzung:"\\n\
"|- '$datei [OPTIONEN] [Prozessname]'"\\n\
"|- '$datei [Prozessname]'"\\n\
"|- Komfortabel Prozesse und ihre Kindprozesse anzeigen und ggf beenden."\\n\
"|-"

txtHILFE=$txtBENUTZUNG\\n\
"|- Hinweise zur Benutzung:"\\n\
"|- -Wenn nur ein Prozessname als Argument angegeben wurde, werden standardmäßig nur die"\\n\
"|-  Infos zu dem Prozess und seinen Kindprozessen angezeigt. (Wie Option '-PS')"\\n\
"|- -Wenn kein Argument angegeben wurde, wird diese Hilfe angezeigt und das Skript beendet."\\n\
"|-"\\n\
"|- Optionen:"\\n\
"|- -h\\t\\tDiesen Hilfetext anzeigen. Andere Optionen werden ignoriert."\\n\
"|- -PS\\t\\tNur die Infos zu dem Prozess und seinen Kindprozessen anzeigen. Dabei ist es egal"\\n\
"|-  \\t\\twie oder wo diese gestartet wurden. Es wird nichts beendet! (Standard)"\\n\
"|- -K\\t\\tDie Infos zu Prozess und Kindprozessen aus dem eigenen Terminal anzeigen und"\\n\
"|-  \\t\\tdiese dann kontrolliert beenden."\\n\
"|- -KA\\t\\tDie Infos zu Prozess und Kindprozessen aus allen Terminals anzeigen und"\\n\
"|-  \\t\\tdiese dann kontrolliert beenden."\\n\
"|-"

txtFEHLERargument=\\n\
"|- FEHLER:\\tKein oder ein unzulässiges Argument übergeben. - Es könnte Panik entstehen!"\\n\
"|-\\t\\tWeitere Hilfe erhalten Sie mit '$datei -h'!"\\n\
"|-"

txtENDEzeitFEHLER=\\n\
"|-"\\n\
"|- Skript Start:\t$zeitSTART"\\n\
"|- Skript Ende: \t"

txtENDEzeit=\\n\
"|- Skript Start:  \t$zeitSTART"\\n\
"|- Kill Start:\t"










flagMORE="false"
# -Die Hilfe anzeigen:
#if ( [[ "$strg1" == -*h* ]] )
if ( [[ "$1" == -*h* ]] || [[ -z "$1" ]] )
then
    #echo -e $txtKOPF
    #echo -e $txtKOPF $txtHILFE | more
    #echo -e $txtKOPF $txtHILFE $befehlAUSGABEmore
    
    if ( [[ "$flagMORE" == "false" ]] )
    then
        # -Normaler Aufruf ohne More-Option
        echo -e "$txtKOPF $txtHILFE"
    else
        echo -e "$txtKOPF $txtHILFE" | more
    fi
    exit 0;
fi





###################################################################################################
##### START Argumente auslesen und zuweisen #######################################################

strg1="-"
strg2="-"
strg3="-"
flagProzessOptionen="false"
flagMORE="false"
flagForceArgument="false"
flagForceGlobal="false"
flagFehlerArgument="false"
flagFEHLERlogs="false"
flagFEHLERlogs2="false"
flagSuchModus="false"

befehlAUSGABEmore=""
# -Die Argumente kontrollieren und neu aufteilen:
# --ALLE normalen Optionen (-q,-h,...) werden im $strg1 gespeichert.
# --Wenn Suchmodus aktiv ist, ist der Suchbegriff im $strg2 gespeichert.
#for i in $*
for i in "$@"
do
    if ( [[ "$flagProzessOptionen" == "true" ]] )
    then
        strg2="$i"
        break
    fi
    if ( [[ "$i" != -* ]] )
    then
        strg2="$i"
        break
    fi
    if ( [[ "$i" == -*h* ]] )
    then
        strg1=$strg1"h"
        break
    fi
#     if ( [[ "$i" == -*l* ]] )
#     then
#         if ( [[ "$i" == -*l\?* ]] )
#         then
#             strg1=$strg1"l?"
#         elif ( [[ "$i" == -*scl* ]] )
#         then
#             strg1=$strg1"scl"
#         elif ( [[ "$i" == "-l" ]] )
#         then
#             strg1=$strg1"l"
#         else
#             flagFehlerArgument="true"
#             break
#         fi
#         break
#     fi
#     if ( [[ "$i" == -*M ]] )
#     then
#         flagMORE="true"
#         continue
#     fi
    if ( [[ "$i" == "-PS" ]] || [[ "$i" == "-K" ]] || [[ "$i" == "-KA" ]] )
    then
        strg1=$i
        flagProzessOptionen="true"
        continue
    fi
    if ( [[ "$i" == -*s* ]] )
    then
        strg1=$i
        flagProzessOptionen="true"
        flagSuchModus="true"
        continue
    fi
    if ( [[ "$i" == -* ]] )
    then
        flagFehlerArgument="true"
        break
    fi
    
done

# -Standard Prozessoption zuweisen:
if ( [[ "$flagProzessOptionen" == "false" ]] )
then
    strg1="-PS"
    flagProzessOptionen="true"
fi

if ( [[ "$flagProzessOptionen" == "true" ]] && [[ "$strg2" = "-" ]] )
then
    flagFehlerArgument="true"
fi
##### ENDE Argumente auslesen und zuweisen ########################################################
###################################################################################################







#echo -e "DEBUG strg1: $strg1"
#echo -e "DEBUG strg2: $strg2"
#echo -e "DEBUG flagProzessOptionen: $flagProzessOptionen"
#echo -e "DEBUG flagFehlerArgument: $flagFehlerArgument"
#[[ $flagProzessOptionen ]] && echo -e "DEBUG Flag ist true." || echo -e "DEBUG Flag ist false."


txtFehlerProzessNotRunning=\
"|- FEHLER:\\t'$strg2' ist in der Liste der laufenden Prozesse nicht vorhanden. Bitte überprüfen"\\n\
"|-\\t\\tSie die Schreibweise. Weitere Hilfe erhalten Sie mit '$datei -h'!"\\n\
"|-"

txtProzessSucheErgebnis=""
#txtProzessSucheErgebnis="`lxPS -q $strg2`"
arrProzessSucheErgebnis=(`ps -A -o comm= | grep -i $strg2`)
arrProzessSucheErgebnisAnzahl=${#arrProzessSucheErgebnis[@]}
#echo -e "|- DEBUG $arrProzessSucheErgebnisAnzahl"
txtProzessSucheErgebnis="`ps -All | grep -i $strg2`"


#txtHinweisProzessSucheInteraktiv

txtFehlerProzessSucheSingular=\\n\
"|- -In der Liste wurde allerdings ein Prozess mit einem ähnlichen Namen gefunden. Nutzen Sie den"\\n\
"|-"\ \ "Suchmodus mittels '-s' um den gefundenen Prozess weiter bearbeiten zu können:"\\n\
"$txtProzessSucheErgebnis"\\n\
"|-"
txtFehlerProzessSuchePlural=\\n\
"|- -In der Liste wurden allerdings Prozesse mit ähnlichen Namen gefunden. Nutzen Sie den"\\n\
"|-"\ \ "Suchmodus mittels '-s' um die gefundenen Prozesse weiter bearbeiten zu können:"\\n\
"$txtProzessSucheErgebnis"\\n\
"|-"


# -Suchmodus ist aktiv, daher können gefundene Prozesse jetzt auch beendet werden:
if ( [[ "$flagSuchModus" == "true" ]] )
then
    txtFehlerProzessSucheSingular=\\n\
    "|- -Es wurde ein Prozess mit einem ähnlichen Namen gefunden. Wenn dies der gesuchte Prozess"\\n\
    "|-"\ \ "ist, kann er nun beendet werden."\\n\
    "$txtProzessSucheErgebnis"\\n\
    "|-"
    txtFehlerProzessSuchePlural=\\n\
    "|- -Es wurden Prozesse mit ähnlichen Namen gefunden. Wenn dies die gesuchten Prozesse sind,"\\n\
    "|-"\ \ "können sie nun beendet werden."\\n\
    "$txtProzessSucheErgebnis"\\n\
    "|-"
fi



[[ $arrProzessSucheErgebnisAnzahl -gt 1 ]] && txtFehlerProzessSuche="$txtFehlerProzessSuchePlural" || txtFehlerProzessSuche="$txtFehlerProzessSucheSingular"
[[ -z $txtProzessSucheErgebnis ]] && txtFehlerProzessSuche=""



[[ "$flagFehlerArgument" == "true" ]] && echo -e "$txtKOPF $txtFEHLERargument" && exit 1;

#[[ -z `ps -C $strg2 -o pid=` ]] && echo -e "$txtKOPF $txtFehlerProzessNotRunning" && lxPS -q $strg2 && exit 1;
#[[ -z `ps -C $strg2 -o pid=` ]] && echo -e "$txtKOPF" && lxPS -q $strg2 && echo -e "$txtFehlerProzessNotRunning" && exit 1;
#[[ -z `ps -C $strg2 -o pid=` ]] && echo -e "$txtKOPF" && lxPS -q $strg2 && [[ -n `lxPS -q $strg2` ]] && echo -e "|-" && echo -e "$txtFehlerProzessNotRunning" && exit 1;
#[[ -z `ps -C $strg2 -o pid=` ]] && echo -e "$txtKOPF" && lxPS -q $strg2 && echo -e "|-" && echo -e "$txtFehlerProzessNotRunning" && exit 1;

#[[ -z `ps -C $strg2 -o pid=` ]] && echo -e "$txtKOPF" && echo -e "$txtFehlerProzessNotRunning" && echo -e "$txtFehlerProzessSuche" && exit 1;
[[ -z `ps -C $strg2 -o pid=` ]] && echo -e "$txtKOPF" && echo -e "$txtFehlerProzessNotRunning$txtFehlerProzessSuche" && exit 1;


echo -e "$txtKOPF"

fncBefehlAufrufenKill "$strg1" "$strg2"





exit 0;











